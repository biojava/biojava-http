<!DOCTYPE html>
<html>
<head>
	<meta charset='utf-8'>
	<title>{{structureId}} CE-Symm Analysis: Multiple Superposition</title>
	<script src='//code.jquery.com/jquery-1.11.0.min.js'></script>
	<script src="{{url}}"></script>
</head>
<body>

<h1>CE-Symm Analysis of {{structureId}}: Multiple Superposition</h1>

<div id="viewport" style="width: 100vw; height: 500px; display:block;"></div>
<div id="messages"></div>
<p><a href="/cesymm/{{structureId}}">CE-Symm Alignment</a></p>
<div id="msa">Loading Multiple Alignment...</div>

<script src="/js/ngl_ui.js"></script>
<script>
NGL.mainScriptFilePath = "{{url}}";
var stage;
document.onkeypress = function(e) { default_keypress(stage,e); };

document.addEventListener( "DOMContentLoaded", function() {
	$.get("{{tsvUrl}}", function(tsv) {
		// Parse TSV file
		// Each line should contain ResNum/Chain/AminoAcid triplets
		// Lines end with tabs, so each line should have 3n+1 columns for n repeats.
		var lines = tsv.split("\n")
			.filter((x) => !x.startsWith("#") && x.length > 0)
			.map((x) => x.split("\t"));

		// Check for significant alignment
		var colorSele = [];

		if( lines.length > 0) {
			// Get number of structures from first line
			var n_strucs = (lines[0].length - 1) / 3;
	
			// Generate color palette
			var colors = palette('cb-Dark2', n_strucs);
	
			// Create selection for each repeat
			var seleStr = [];
			for (j = 0; j < n_strucs; j++) {
				for (i = 0; i < lines.length; i++) {
					if (lines[i][3*j] != "-") {
						seleStr.push("( " + lines[i][3*j] + " and :" + lines[i][3*j+1] + " )");
					}
				}
			}
			for (j = 0; j < n_strucs; j++) {
				colorSele.push( ["#" + colors[j], "( "+seleStr.join(" or ")+" ) and /"+j ]);
			}
		} else {
			$('#messages').html("<p>No significant alignment found.</p>");
		}
		colorSele.push(["lightgrey","*"]);

		var schemeId = NGL.ColorMakerRegistry.addSelectionScheme( colorSele, "CE-Symm {{structureId}}" );

		stage = new NGL.Stage( "viewport" );
		stage.setParameters({ backgroundColor:"white" } );

		stage.loadFile( "/cesymm/{{structureId}}/mmtf", { defaultRepresentation: false, ext:"mmtf" } ).then( function( o ){
			o.addRepresentation( "cartoon", { color: schemeId } );
			o.addRepresentation( "ball+stick", {
				sele: "hetero and not ( water )"
			});
			o.centerView();
		} );

	});
} );

</script>


<script src="https://cdn.bio.sh/msa/latest/msa.min.gz.js"></script>

<script src="https://cdn.rawgit.com/google/palette.js/master/palette.js"></script>
<!--script src="{{pallete_url}}"></script-->
<script>
var opts = {
	el: document.getElementById("msa"),
	vis: {
		conserv: false,
		overviewbox: false
	}
};

var m = new msa.msa(opts);
m.u.file.importURL("/cesymm/{{structureId}}/fasta", function(){
	var numrows = m.g.seqs.length;
	m.g.colorscheme.addDynScheme("Repeats", repeatScheme(numrows) );
	m.g.colorscheme.set("scheme", "Repeats");
	m.render();
});
</script>


</body>
</html>
