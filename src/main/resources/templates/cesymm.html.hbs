<!DOCTYPE html>
<html>
<head>
	<meta charset='utf-8'>
	<title>{{structureId}} CE-Symm Analysis</title>
</head>
<body>

<h1>CE-Symm Analysis of {{structureId}}</h1>

<script src='//code.jquery.com/jquery-1.11.0.min.js'></script>

<script src="{{url}}"></script>

<script src="https://cdn.rawgit.com/google/palette.js/master/palette.js"></script>
<!--script src="{{pallete_url}}"></script-->
<script src="/js/ngl_ui.js"></script>
<script>
NGL.mainScriptFilePath = "{{url}}";
var stage;
document.onkeypress = function(e) { default_keypress(stage,e); };

document.addEventListener( "DOMContentLoaded", function() {
	$.get("{{tsvUrl}}", function(tsv) {
		stage = new NGL.Stage( "viewport" );
		stage.setParameters({ backgroundColor:"white" } );

		// Parse TSV file
		// This can be cleaner
		raw_lines = tsv.split("\n");
		var lines = []
		for (k = 0; k < raw_lines.length; k++) {
			if (!raw_lines[k].startsWith("#") && raw_lines[k].length > 0) {
				lines.push(raw_lines[k])
			}
		}

		// Get number of structures from first line
		var n_strucs = (lines[0].split("\t").length - 1) / 3;

		// Generate color palette
		var colors = palette('cb-Dark2', n_strucs);

		stage.loadFile( "/pdb/{{structureId}}", { defaultRepresentation: false, ext:"pdb" } ).then( function( o ){
			o.addRepresentation( "backbone", { color: "lightgrey" } );
			for (i = 0; i < lines.length; i++) {
				var tabs = lines[i].split("\t");
				for (j = 0; j < n_strucs; j++) {
					if (tabs[3*j] != "-") {
						o.addRepresentation( "backbone", {
							sele: "(" + tabs[3*j] + " or " + (parseInt(tabs[3*j])+1) + ") and :" + tabs[3*j+1],
							color: "#" + colors[j]
						});
					}
				}
			}
			o.addRepresentation( "ball+stick", {
				sele: "hetero and not ( water )"
			});
			o.centerView();
		} );
	});
} );

</script>

<div id="viewport" style="width: 100vw; height: 100vh; display:block;"></div>

</body>
</html>
